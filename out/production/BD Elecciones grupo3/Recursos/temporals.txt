public boolean update(Persona persona) throws SQLException{
        boolean updatedPerson = false;
        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = DBMySQLManager.getConnection();
            String sql = "UPDATE persones SET nom = ?, cog1 = ?, cog2 = ?, dni = ? WHERE persona_id = ?";
            stmt = con.prepareStatement(sql);
            stmt.setString(1, persona.getNom());
            stmt.setString(2, persona.getCog1());
            stmt.setString(3, persona.getCog2());
            stmt.setString(4, persona.getDni());
            stmt.setLong(5, persona.getPersona_id());

            int quantity = stmt.executeUpdate();

            updatedPerson = (quantity > 0);
        } catch (Exception e) {
            System.out.println("Error al actualizar la persona " + e.getMessage());
        } finally {
            if (stmt != null) {
                stmt.close();
            }
            if (con != null) {
                con.close();
            }
        }
        return updatedPerson;
    }










//    @Override
//    public boolean read(Persona persona) throws SQLException {
//
//        Connection con = null;
//        PreparedStatement stmt = null;
//
//        try{
//            con = DBMySQLManager.getConnection();
//            String sql = "SELECT nom, cog1, cog2, dni FROM persones WHERE dni = ?";
//            stmt = con.prepareStatement(sql);
//            stmt.setString(1, persona.getDni());
//
//
//        }catch (Exception e){
//            System.out.println("Error al crear la persona " + e.getMessage());
//        }finally{
//            if (stmt != null) {
//                stmt.close();
//            }
//            if (con != null) {
//                con.close();
//            }
//        }
//        return false;
//    }

    public boolean read(Long persona_id) {
//        Persona er = read(p.getPersona_id());
//        if (er == null) return false;
//        p.set(er.getNom(), er.getDn(), er.getDep());
        return true;
    }

//    public Persona read(long persona_id) {
//        String p = Long.toString(persona_id);
//        String query = "SELECT nom, cog1, cog2, dni FROM persones WHERE id= ?";
//        List<Object[]> r = DBMySQLManager.read(query);
//        if (r == null || r.size() != 1) return null;
//        Object[] o = r.iterator().next();
//        return new Persona(persona_id, (String) o[0], (String) o[1], (String) o[2], (String) o[3]);
//    }



MAIN:

  /*
        PersonaDAODB personaDAO = new PersonaDAODB();

        try {
            // Leer la persona que se desea actualizar desde la base de datos
            long personaId = 3839; // ID de la persona a actualizar
            String nombreActual = personaDAO.read(personaId);
            System.out.println("Nombre actual: " + nombreActual);

            // Crear una instancia de Persona con los nuevos valores
            Persona persona = new Persona("Nuevo nombre");
            persona.setPersona_id(personaId);
            persona.setNom("Davidillo");
            persona.setCog1("García");
            persona.setDni("33333333");

            // Actualizar la persona en la base de datos
            boolean actualizado = personaDAO.update(persona);
            if (actualizado) {
                System.out.println("Persona actualizada correctamente.");
            } else {
                System.out.println("No se pudo actualizar la persona.");
            }

        } catch (SQLException e) {
            System.out.println("Error al realizar la operación en la base de datos: " + e.getMessage());
        }
    }

         */
        ComunitatAutonomaDAODB CA_DAO = new ComunitatAutonomaDAODB();

        try {
            // Leer la persona que se desea actualizar desde la base de datos
            long comunitat_aut_id = 20; // ID de la persona a actualizar
            String nombreActual = CA_DAO.read(comunitat_aut_id);
            System.out.println("Nombre actual: " + nombreActual);

            // Crear una instancia de Persona con los nuevos valores
            ComunitatAutonoma CA = new ComunitatAutonoma("Nuevo nombre");
            CA.setComunitat_aut_id(comunitat_aut_id);
            CA.setNom("Llambilles");
            CA.setCodi_ine("77");


            // Actualizar la persona en la base de datos
            boolean actualizado = CA_DAO.update(CA);
            if (actualizado) {
                System.out.println("CA actualizada correctamente.");
            } else {
                System.out.println("No se pudo actualizar la CA.");
            }

        } catch (SQLException e) {
            System.out.println("Error al realizar la operación en la base de datos: " + e.getMessage());
        }
    }







    --Update

    public boolean update(Candidatura candidatura) throws SQLException {
            boolean updatedCandidatura = false;

            PreparedStatement stmt = null;
            try {
                // Construir la consulta SQL base
                StringBuilder sqlBuilder = new StringBuilder("UPDATE candidatures SET");
                List<Object> parameters = new ArrayList<>();

                // Verificar y agregar los campos a actualizar
                if (candidatura.getCodi_candidatura() != null) {
                    sqlBuilder.append(" codi_candidatura = ?,");
                    parameters.add(candidatura.getCodi_candidatura());
                }
                if (candidatura.getNom_curt() != null) {
                    sqlBuilder.append(" nom_curt = ?,");
                    parameters.add(candidatura.getNom_curt());
                }
                if (candidatura.getNom_llarg() != null) {
                    sqlBuilder.append(" nom_llarg = ?,");
                    parameters.add(candidatura.getNom_llarg());
                }
                if (candidatura.getCodi_acumulacio_provincia() != null) {
                    sqlBuilder.append(" codi_acumulacio_provincia = ?,");
                    parameters.add(candidatura.getCodi_acumulacio_provincia());
                }
                if (candidatura.getCodi_acumulacio_ca() != null) {
                    sqlBuilder.append(" codi_acumulacio_ca = ?,");
                    parameters.add(candidatura.getCodi_acumulacio_ca());
                }
                if (candidatura.getCodi_acumulacio_nacional() != null) {
                    sqlBuilder.append(" codi_acumulacio_nacional = ?,");
                    parameters.add(candidatura.getCodi_acumulacio_nacional());
                }

                // Eliminar la última coma (,) y completar la cláusula WHERE
                sqlBuilder.deleteCharAt(sqlBuilder.length() - 1);
                sqlBuilder.append(" WHERE candidatura_id = ?");
                parameters.add(candidatura.getCandidatura_id());

                // Crear la declaración preparada y establecer los parámetros
                stmt = con.prepareStatement(sqlBuilder.toString());
                for (int i = 0; i < parameters.size(); i++) {
                    stmt.setObject(i + 1, parameters.get(i));
                }

                int quantity = stmt.executeUpdate();
                updatedCandidatura = (quantity > 0);
            } catch (Exception e) {
                System.out.println("Error al actualizar la candidatura " + e.getMessage());
            } finally {
                if (stmt != null) {
                    stmt.close();
                }
            }
            return updatedCandidatura;
        }

        -UPDATE V. CUTRE CANDIDATURES

        public boolean update(Candidatura candidatura) throws SQLException{
                boolean updatedCandidatura = false;
                Connection con = null;
                PreparedStatement stmt = null;
                try {
                    con = DBMySQLManager.getConnection();
                    String sql = "UPDATE candidatures SET nom_curt = ?, nom_llarg = ?, codi_acumulacio_provincia = ?, codi_acumulacio_ca = ?, codi_acumulacio_nacional = ? WHERE candidatura_id = ?";
                    stmt = con.prepareStatement(sql);
                    stmt.setString(1, candidatura.getNom_curt());
                    stmt.setString(2, candidatura.getNom_llarg());
                    stmt.setString(3, candidatura.getCodi_acumulacio_provincia());
                    stmt.setString(4, candidatura.getCodi_acumulacio_ca());
                    stmt.setString(5, candidatura.getCodi_acumulacio_nacional());
                    stmt.setLong(6, candidatura.getCandidatura_id());

                    int quantity = stmt.executeUpdate();

                    updatedCandidatura = (quantity > 0);


                } catch (Exception e) {
                    System.out.println("Error al actualizar la candidatura " + e.getMessage());
                } finally {
                    if (stmt != null) {
                        stmt.close();
                    }
                    if (con != null) {
                        con.close();
                    }
                }
                return updatedCandidatura;
            }



    --MAIN DEL UPDATE

    CandidaturaDAODB candidaturaDAO = new CandidaturaDAODB();

                // Crear una instancia de Candidatura con los datos a actualizar
                Candidatura candidatura = new Candidatura("nuevo nombre corto", "nuevo nombre largo");
                candidatura.setCandidatura_id(84); // ID de la candidatura a actualizar
                candidatura.setNom_curt("PALEATO"); // Nuevo valor para el campo "nom_curt"
                candidatura.setNom_llarg("PUEBLO ALZADO LINDO ESPAÑOL ATEO TRIUNFADOR OMNIPRESENTE"); // Nuevo valor para el campo "nom_llarg"
                candidatura.setCodi_acumulacio_provincia("888888");
                candidatura.setCodi_acumulacio_ca("888888");
                candidatura.setCodi_acumulacio_nacional("888888");

                try {
                    boolean result = candidaturaDAO.update(candidatura);
                    if (result) {
                        System.out.println("Candidatura actualizada correctamente.");
                    } else {
                        System.out.println("No se pudo actualizar la candidatura.");
                    }
                } catch (SQLException e) {
                    System.out.println("Error al actualizar la candidatura: " + e.getMessage());
                }
            }



    -- MAIN DELETE PERSONA

    PersonaDAODB personaDAO = new PersonaDAODB();

            // Crear una instancia de Persona con el ID de la persona a eliminar
            Persona persona = new Persona();
            persona.setPersona_id(3839); // ID de la persona a eliminar

            try {
                boolean result = personaDAO.delete(persona);
                if (result) {
                    System.out.println("Persona eliminada correctamente.");
                } else {
                    System.out.println("No se pudo eliminar la persona.");
                }
            } catch (SQLException e) {
                System.out.println("Error al eliminar la persona: " + e.getMessage());
            }
        }



-- MAIN DELETE COMUNITATS AUTONOMES


        ComunitatAutonomaDAODB comunitatAutonomaDAODB = new ComunitatAutonomaDAODB();

        // Crear una instancia de Persona con el ID de la persona a eliminar
        ComunitatAutonoma comunitatAutonoma = new ComunitatAutonoma();
        comunitatAutonoma.setComunitat_aut_id(20); // ID de la persona a eliminar

        try {
            boolean result = comunitatAutonomaDAODB.delete(comunitatAutonoma);
            if (result) {
                System.out.println("Comunitat autonoma eliminada correctamente.");
            } else {
                System.out.println("No se pudo eliminar la comunitat autonoma.");
            }
        } catch (SQLException e) {
            System.out.println("Error al eliminar la comunitat autonoma: " + e.getMessage());
        }


-- MAIN DELETE CANDIDATURAS

CandidaturaDAODB candidaturaDAODB = new CandidaturaDAODB();

        // Crear una instancia de Persona con el ID de la persona a eliminar
        Candidatura candidatura = new Candidatura();
        candidatura.setCandidatura_id(84); // ID de la persona a eliminar

        try {
            boolean result = candidaturaDAODB.delete(candidatura);
            if (result) {
                System.out.println("Candidatura eliminada correctamente.");
            } else {
                System.out.println("No se pudo eliminar la candidatura.");
            }
        } catch (SQLException e) {
            System.out.println("Error al eliminar la candidatura: " + e.getMessage());
        }